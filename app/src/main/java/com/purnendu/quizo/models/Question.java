package com.purnendu.quizo.models;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;

/**
 * Represents a quiz question entity in the Quizo application.
 * This class is designed as a Room {@link androidx.room.Entity} for database persistence,
 * storing all details required for a multiple-choice question.
 * Each question has a unique auto-generated primary key.
 * <p>
 * Key fields include:
 * <ul>
 * <li>{@code id}: A unique identifier for the question, auto-generated by the database.</li>
 * <li>{@code topic}: The subject category of the question (e.g., "Math", "Literature", "Computer").</li>
 * <li>{@code questionText}: The actual text of the question.</li>
 * <li>{@code optionA}, {@code optionB}, {@code optionC}, {@code optionD}: The four possible answer choices.</li>
 * <li>{@code correctAnswer}: The text of the correct answer among the options.</li>
 * </ul>
 *
 * @author Purnendu Guha
 * @version 2.0.1
 */
@Entity(tableName = "questions")
public class Question {

    /**
     * The subject category of the question (e.g., "Math", "Literature", "Geography").
     * Stored as a column in the database.
     */
    @ColumnInfo(name = "topic")
    private final String topic; // e.g., "Math", "Literature", "GeographyQuizActivity"

    /**
     * The main text of the question.
     * Stored as a column in the database.
     */
    @ColumnInfo(name = "question_text")
    private final String questionText;

    /**
     * The text for option A of the question.
     * Stored as a column in the database.
     */
    @ColumnInfo(name = "option_a")
    private final String optionA;

    /**
     * The text for option B of the question.
     * Stored as a column in the database.
     */
    @ColumnInfo(name = "option_b")
    private final String optionB;

    /**
     * The text for option C of the question.
     * Stored as a column in the database.
     */
    @ColumnInfo(name = "option_c")
    private final String optionC;

    /**
     * The text for option D of the question.
     * Stored as a column in the database.
     */
    @ColumnInfo(name = "option_d")
    private final String optionD;

    /**
     * The text of the correct answer for this question.
     * Stored as a column in the database.
     */
    @ColumnInfo(name = "correct_answer")
    private final String correctAnswer; // Stores the text of the correct option (e.g., "Paris")

    /**
     * The unique identifier for the question.
     * This is an auto-generated primary key in the database.
     */
    @PrimaryKey(autoGenerate = true)
    private int id;

    /**
     * Constructs a new {@link Question} object with all necessary details.
     *
     * @param topic         The subject topic of the question.
     * @param questionText  The main text of the question.
     * @param optionA       The text for the first option.
     * @param optionB       The text for the second option.
     * @param optionC       The text for the third option.
     * @param optionD       The text for the fourth option.
     * @param correctAnswer The text of the correct answer among the options.
     */
    public Question(String topic, String questionText, String optionA,
                    String optionB, String optionC, String optionD, String correctAnswer) {
        this.topic = topic;
        this.questionText = questionText;
        this.optionA = optionA;
        this.optionB = optionB;
        this.optionC = optionC;
        this.optionD = optionD;
        this.correctAnswer = correctAnswer;
    }

    // --- Getters ---

    /**
     * Returns the unique ID of the question.
     *
     * @return The question ID.
     */
    public int getId() {
        return id;
    }

    // --- Setters (Room requires setters for mutable fields if not final) ---

    /**
     * Sets the unique ID of the question. This is typically set by Room when inserting into the database.
     *
     * @param id The ID to set for the question.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the topic of the question.
     *
     * @return The question topic.
     */
    public String getTopic() {
        return topic;
    }

    /**
     * Returns the main text of the question.
     *
     * @return The question text.
     */
    public String getQuestionText() {
        return questionText;
    }

    /**
     * Returns the text for option A.
     *
     * @return The text for option A.
     */
    public String getOptionA() {
        return optionA;
    }

    /**
     * Returns the text for option B.
     *
     * @return The text for option B.
     */
    public String getOptionB() {
        return optionB;
    }

    /**
     * Returns the text for option C.
     *
     * @return The text for option C.
     */
    public String getOptionC() {
        return optionC;
    }

    /**
     * Returns the text for option D.
     *
     * @return The text for option D.
     */
    public String getOptionD() {
        return optionD;
    }

    /**
     * Returns the text of the correct answer.
     *
     * @return The correct answer text.
     */
    public String getCorrectAnswer() {
        return correctAnswer;
    }
}